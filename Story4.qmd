---
title: "Story 4: How much do we get paid?"
author: "Naomi Buell"
format: pptx
editor: visual
---

```{r}
#| label: load packages
#| message: false
library(tidyverse)
library(janitor)
library(jsonlite)
library(httr2)
```

## Intro

For this story we will answer the question, "How much do we get paid?"

My analysis and data visualizations address the variation in average salary for "Data Practitioners" based on role descriptor and state. The term "Data Practitioner" is a generic job descriptor which includes many different job role titles for individuals whose work activities overlap including Data Scientist, Data Engineer, Data Analyst, Business Analyst, Data Architect, etc.

## Get data from the Bureau of Labor Statistics (BLS) through the CareerOneStop API

Here, I download salary data from BLS Occupational Employment and Wages Statistics (OEWS) using the [CareerOneStop.org API](https://www.careeronestop.org/Developers/WebAPI/technical-information.aspx). I get salary data by state on [data scientists](https://www.bls.gov/ooh/math/data-scientists.htm), which include data analytics specialists, data mining analysts, data visualization developers, and business intelligence developers. I also pull data on [database administrators and architects](https://www.bls.gov/ooh/computer-and-information-technology/database-administrators.htm), which include automatic data processing planners, data architects, database administration managers, database coordinators, database developers, database programmers, database security administrators, data integration specialists, data warehousing specialists, and automatic data processing planners. Data is from May 2023.

```{r}
#| label: Pull data w/ CareerOneStop API
#| error: true
#| message: false
#| warning: false
#| results: hide

# API credentials
api_token <- "yewsVIARypHPbfHNt0GchJsjUeX3dbkJArnwCuvaUKklKZEssGpl9NuLO4jIeGJng+Q8raXwGDrcag6UsfDtlA=="
userid <- "1K9fclpWIkgV5X8"
base_url <- "https://api.bls.gov/publicAPI/v2/timeseries/data/"
locations <- state.abb
keywords <- c("152051", # Data scientists
              "151243", # Database architects
              "151242") # Database Administrators

# Initialize list and df for storage in the proceeding loop
data <- list()

# Loop through state and job codes and pull data w/ API
for (location in locations) {
  for (keyword in keywords) {
    request_url <- paste0(
      "https://api.careeronestop.org/v1/comparesalaries/",
      userid,
      "/wage?keyword=",
      keyword,
      "&location=",
      location,
      "&enableMetaData=false"
    )
    
    response <- request(request_url) |>
      req_method("GET") |>
      req_headers("Content-Type" = "application/json",
                  "Authorization" = paste("Bearer", api_token)) |>
      req_url_query(keyword = keyword,
                    location = location,
                    enableMetaData = F) |>
      req_perform()  # Send the request
    
    # Parse the JSON response
    data[[location]][[keyword]] <- response |> resp_body_json()
    
    # Add a delay to avoid hitting the API rate limit
    Sys.sleep(0.4)
  }
}
```

I bind data together, keeping only variables of interest.

```{r}
#| label: bind and clean data

results <- tibble()

for (location in locations) {
  for (keyword in keywords) {
      title <- data[[location]][[keyword]][["OccupationDetail"]][["OccupationTitle"]]
      wages_list <- data[[location]][[keyword]][["OccupationDetail"]][["Wages"]][["StateWagesList"]]
      
      # Create a data frame from the StateWagesList
      wage_df <- do.call(rbind, lapply(wages_list, function(wage) {
        data.frame(
          median = wage[["Median"]],
          rate_type = wage[["RateType"]],
          pct_10 = wage[["Pct10"]],
          pct_25 = wage[["Pct25"]],
          pct_75 = wage[["Pct75"]],
          pct_90 = wage[["Pct90"]],
          stringsAsFactors = F
        )
      }))
      
      # Add the state and occupation title to the wage_df
      wage_df$state <- location
      wage_df$occupation_title <- title
      
      # Append to results data frame
      results <- rbind(results, wage_df)
  }
}
```

I clean and tidy the resulting dataset below.

```{r}
#| label: clean df

results_clean <- results |> 
  mutate(
    state = as_factor(state),
    occupation_title = as_factor(occupation_title),
    median = as.numeric(median),
    pct_10 = as.numeric(pct_10),
    pct_25 = as.numeric(pct_25),
    pct_75 = as.numeric(pct_75),
    pct_90 = as.numeric(pct_90)
  ) |> 
  clean_names() |> 
  select(state, occupation_title, rate_type, median, starts_with("pct")) |> 
  arrange(state, desc(median))

head(results_clean)
```

## Graph data

In my visualization(s) below, I show the most salient information (variation in average salary by role and by state).

```{r}
#| label: Create a boxplot using summary statistics, facet wrap by occupation

results_clean |>
  filter(rate_type == "Annual") |>
  ggplot(aes(x = reorder(state, median))) +
  geom_boxplot(aes(
    ymin = pct_10,
    lower = pct_25,
    middle = median,
    upper = pct_75,
    ymax = pct_90
  ),
  stat = "identity") +
  facet_wrap( ~ occupation_title, scales = "free_y") +  
  # Edit theme and formatting
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  coord_flip()
```

```{r}
#| label: box plots, color

results_clean |>
  filter(rate_type == "Annual") |>
  group_by(state) |> 
  ggplot(aes(x = reorder(state, median), color = occupation_title)) +  # Different colors for each occupation
  geom_boxplot(
    aes(
      ymin = pct_10,
      lower = pct_25,
      middle = median,
      upper = pct_75,
      ymax = pct_90
    ),
    stat = "identity"
  ) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  coord_flip()
```

```{r}
#| label: box plots, color and facet wrap

results_clean |>
  filter(rate_type == "Annual") |>
  group_by(state) |> 
  ggplot(aes(x = reorder(state, median), color = occupation_title)) +  # Different colors for each occupation
  geom_boxplot(
    aes(
      ymin = pct_10,
      lower = pct_25,
      middle = median,
      upper = pct_75,
      ymax = pct_90
    ), stat = "identity"
  ) +
  facet_wrap(~ occupation_title, scales = "free_y") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  coord_flip()
```

```{r}
#| label: box plots by state

# Create the boxplot
results_clean |> 
  filter(rate_type == "Annual") |> 
  pivot_longer(cols = c(median, starts_with("p"))) |> 
  ggplot(aes(x = value, y = reorder(state, value))) +
  geom_boxplot() +
  theme_minimal() +
    theme(panel.grid.major = element_blank(),  # Remove major gridlines
        panel.grid.minor = element_blank())  # Remove minor gridlines
```

```{r}
#| label: box plots by role

results_clean |>
  filter(rate_type == "Annual") |>
  ggplot(aes(x = occupation_title, y = median/1000)) +
  geom_boxplot() +
  # Edit theme
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  labs(y = "Median annual salary (thousands)",
       x = "")
```

Get number employed data to simulate a distribution.

```{r}
#| label: get df

path <- "https://www.bls.gov/oes/special-requests/oesm23all.zip"

df <- read_
```
